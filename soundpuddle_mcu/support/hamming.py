#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:fenc=utf-8

import numpy as np
import sys

def q15(value):
    q = min(int(round(value*(2**15))), 32767)
    return q

if len(sys.argv) != 3:
    print("Usage: hamming.py <file_basename> <len>")
    sys.exit(1)

fft_size = int(sys.argv[2])
hamming = np.hamming(fft_size)

hamming_q15 = [q15(value) for value in hamming]

variable_name   = sys.argv[1] + "_len" + str(fft_size)
header_filename = variable_name + ".h"
source_filename = variable_name + ".c"

with open(header_filename, "w") as header_file:
    header_file.write("#pragma once\n\n");
    header_file.write("/* This is an autogenerated file -- DO NOT EDIT */\n\n");
    header_file.write("#include <arm_math.h>\n\n");
    header_file.write("extern const q15_t " + variable_name + "[" + str(fft_size) + "];\n");

with open(source_filename, "w") as source_file:
    source_file.write('#include "' + header_filename + '"\n\n');
    source_file.write("#include <arm_math.h>\n\n");
    source_file.write("/* This is an autogenerated file -- DO NOT EDIT */\n\n");
    source_file.write("const q15_t " + variable_name + "[" + str(fft_size) + "] = {\n");
    for value in hamming_q15:
        source_file.write("    " + str(value) + ",\n");
    source_file.write("};\n");
